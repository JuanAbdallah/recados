@page "/recados/delete/{Id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using RecadoModel

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Recado</h4>
    <hr />
    @if (recado is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Mensagem</dt>
            <dd class="col-sm-10">@recado.Mensagem</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Remetente</dt>
            <dd class="col-sm-10">@recado.Remetente</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Destinatario</dt>
            <dd class="col-sm-10">@recado.Destinatario</dd>
        </dl>
        <EditForm Model="recado" OnValidSubmit="DeleteRecado">
            <button type="submit" class="btn btn-danger" disabled="@(recado is null)">Delete</button> |
            <a href="/recados">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private RecModel? recado;

    [Parameter]
    public int Id { get; set; }
    private string errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            recado = await Http.GetFromJsonAsync<RecModel>($"api/recadoes/{Id}");
            
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
    }

    public async Task DeleteRecado()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/recadoes/{recado!.Id}");
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/recados");
            }
            else
            {
                errorMessage = "Erro ao deletar";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
    }
}
